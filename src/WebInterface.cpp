#include "WebInterface.h"

WebInterface::WebInterface(
    PowerController &powerController,
    BatteryMonitor &batteryMonitor,
    PowerSupplyMonitor &powerSupplyMonitor,
    TimeManager &timeManager,
    Settings &settings,
    Scheduler &scheduler
) : _server(80),
    _powerController(powerController),
    _batteryMonitor(batteryMonitor),
    _powerSupplyMonitor(powerSupplyMonitor),
    _timeManager(timeManager),
    _settings(settings),
    _scheduler(scheduler)
{}

void WebInterface::begin() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    _server.on("/", std::bind(&WebInterface::handleRoot, this));
    _server.on("/setTime", std::bind(&WebInterface::handleSetTime, this));
    _server.on("/setSettings", std::bind(&WebInterface::handleSetSettings, this));
    _server.on("/togglePower", std::bind(&WebInterface::handleTogglePower, this));
    _server.begin();
}

void WebInterface::handleClient() {
    _server.handleClient();
}

void WebInterface::handleRoot() {
    String html = "<html><head><title>Router Control</title></head><body>";
    html += "<h1>Router Control Panel</h1>";

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è
    if (_powerSupplyMonitor.isMainsPower()) {
        html += "<p>Power Source: <strong>Mains</strong> ‚ö°</p>";
    } else {
        html += "<p>Power Source: <strong>Battery</strong> üîã</p>";
    }

    // –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
    html += "<p>Battery Level: " + String(_batteryMonitor.getChargeLevel()) + "%</p>";

    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    html += "<p>Current Hour: " + String(_timeManager.getHour()) + "</p>";

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    html += "<p>Router is " + String(_powerController.isOn() ? "ON" : "OFF") + "</p>";
    html += "<form action='/togglePower' method='post'><button type='submit'>Toggle Power</button></form>";

    // –§–æ—Ä–º–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    html += "<form action='/setTime' method='post'>Set Hour: <input type='number' name='hour' min='0' max='23'/><button type='submit'>Set Time</button></form>";

    // –§–æ—Ä–º–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    html += "<form action='/setSettings' method='post'>Auto-Off Start Hour: <input type='number' name='startHour' min='0' max='23'/>";
    html += " End Hour: <input type='number' name='endHour' min='0' max='23'/><button type='submit'>Set Auto-Off Interval</button></form>";
    html += "</body></html>";

    _server.send(200, "text/html", html);
}

void WebInterface::handleSetTime() {
    if (_server.hasArg("hour")) {
        uint8_t hour = _server.arg("hour").toInt();
        _timeManager.setHour(hour);
    }

    _server.sendHeader("Location", "/");
    _server.send(303); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
}

void WebInterface::handleSetSettings() {
    if (_server.hasArg("startHour") && _server.hasArg("endHour")) {
        uint8_t startHour = _server.arg("startHour").toInt();
        uint8_t endHour = _server.arg("endHour").toInt();
        _settings.setAutoOffInterval(startHour, endHour);
        _settings.save();
    }

    _server.sendHeader("Location", "/");
    _server.send(303); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
}

void WebInterface::handleTogglePower() {
    bool powerState = _powerController.isOn();
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è

    if (powerState) {
        _powerController.turnOff();
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
        //_scheduler.cancelTask(/* —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è */);
    } else {
        _powerController.turnOn();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
        uint8_t startHour, endHour;
        _settings.getAutoOffInterval(startHour, endHour);
        uint8_t currentHour = _timeManager.getHour();

        if (
            _powerSupplyMonitor.isBatteryPower() &&
            ((startHour <= endHour && currentHour >= startHour && currentHour < endHour) ||
            (startHour > endHour && (currentHour >= startHour || currentHour < endHour)))
        ) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
            uint8_t offHour = (currentHour + 1) % 24; // –°–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            RouterControlTask *routerControlTask = new RouterControlTask(offHour, _powerController, _timeManager);
            _scheduler.scheduleTask(routerControlTask);
        }
    }

    _server.sendHeader("Location", "/");
    _server.send(303); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
}
